@using ChainSharp.Effect.Data.Services.IDataContextFactory
@using ChainSharp.Effect.Enums
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@code {
    private double percentage = 0;
    private bool isLoading = true;

    [Inject]
    private IDataContextProviderFactory DataContextFactory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var dataContext = DataContextFactory.Create();

            var counts = await dataContext.Metadatas
                .Where(x => x.StartTime < DateTime.UtcNow.AddDays(-1))
                .GroupBy(row => row.WorkflowState)
                .Select(group => new { Status = group.Key, Count = group.Count() })
                .ToListAsync();

            var totalCount = counts.Sum(x => x.Count);
            var completedCount = counts.FirstOrDefault(x => x.Status == WorkflowState.Completed)?.Count ?? 0;

            percentage = totalCount > 0 
                ? (double)completedCount / totalCount * 100 
                : 0;

        }
        finally
        {
            isLoading = false;
        }
    }

    private class WorkflowStates
    {
        public string State { get; set; }
    
        public int Amount { get; set; }
    }
}

<RadzenArcGauge Style="width: 100%; height: 250px;">
    <RadzenArcGaugeScale Step="10" Min="0" Max="100" MinorStep="2" Radius="1.5" TickPosition=@GaugeTickPosition.Inside Y="0.9" Margin="0">
        <RadzenArcGaugeScaleValue Value=@percentage ShowValue=true>
            <Template Context="pointer">
                <RadzenStack AlignItems="AlignItems.Center" Gap="0" Style="margin-top: -10%;">
                    <RadzenText TextStyle="TextStyle.H5" class="rz-m-0"><strong>@pointer.Value</strong></RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption">Percent Complete Workflows 24h</RadzenText>
                </RadzenStack>
            </Template>
        </RadzenArcGaugeScaleValue>
    </RadzenArcGaugeScale>
</RadzenArcGauge>